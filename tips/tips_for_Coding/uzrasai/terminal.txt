129733643+codingstart0@users.noreply.github.com

cd yt6u53+77+(

brain.fm
sojed95526@abatido.com
sojed95526
https://temp-mail.org/

<<<<<<<<<<<<<<<<<<<<<<<<<TIPS & TRICS>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Open TERMINAL		You can also open the terminal by pressing Ctrl + Alt + T on your keyboard. Open the programs menu and search for “Terminal”. 

Copy/Paste		When you’re inside the command line, you’ll need to use Ctrl + Shift + C to copy and Ctrl + Shift + V to paste.

tab completion		using " Tab" key autofill text, just nead write 2-3 charecters in the begining and press "Tab"
			by pressing "Tab" twice brings up a list of all the files

unix man page		When using internet search, including this phrase in your search query will help to find relevant results.

div		Empty "div"s by default have 0 height.




<<<<<<<<<<<< ALIAS (shortcut) >>>>>>>>>>>>

------------------
How to change default settings, including shortcut etc. for startup user:

cd > go to your HOME direction
nano .bashrc > open bashrc and you can add some rules.
^x > save with the same name


To load this changes you must relog (logout/ login) your user.
To do this you can run comand "source filename [arguments]" in ex. "source .bashrc"


THATS IT!!!!!
------------------

Default shortcut

alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

------------------

ALIAS CREATED BY OWNER:

cdodin - evaldas@evaldas-ideapad:~/workspace/Codingstart0/Odin_GitHub/repos
cdnote="cd ~/workspace/tips_for_Coding/uzrasai/"


------------------------------------------------
windows + D it's a shortcut for desktop on linux
^C		escape from some kind of mistake, you can escape out of this state by holding down the Ctrl+C.
q		let you escape from some troubles

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< NODE.JS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
node	To run the Node console, open up your terminal and type node .
exit	To quit the console type .exit in terminal.





<<<<<<<<< most used comand in terminal >>>>>>>>>>>
cd		change directory. Start with your home folder as your working directory
mkdir		means make directory "mkdir [path]". "mkdir" won’t create a subdirectory of a non-existent directory: the intermediate level folders must be created first
ls		list. Print the contents of the current directory in alphabetically order.

mv		pronouncing like move, you can move file from one directory to another "mv [old] [new]" i.e. "mv thesis/quotes.txt ."
		or you can rename the file. i.e. "mv pirmas.txt antras.txt" this comand will rename from "pirmas" to "antras" 

cd		take action
ls		just list info, but not move you anythere
^C		escape from some kind of mistake, you can escape out of this state by holding down the Ctrl+C.
q		let you escape from some troubles


COMAND
	
whoami		Who am I. Print your name
echo		comand print text
pwd	-	print working directory
cd		change directory. Start with your home folder as your working directory

ls		list. Print the contents of the current directory in alphabetically order.
ls /usr/local/	shows the files and directories inside of the /usr/local directory, without having to leave the current directory that I am in.
ls -lh		list shown in a rows in human (h) readeble mode.

chmod 		this comand let you change permision for USER GROUPE OTHER"chmod 764" it's a commonly used combination
chown		If you want to change owner run comand "chown"
ugo		

getfacl		shows list in a rows of: #file #owners #groupe & ugo permision. Always add file name i.e. "getfacl file.txt".


clear		clear your terminal

ls --help	ways to find out how to use a command (for example comand ls) and what options it accepts
man ls		manual list. This command will turn your terminal into a page with a description of the command (for example comand ls) and its options.

code		open text editor VS Code from terminal
code . 		It will launch VS Code and open up the curent folder in the sidebar.
code . [path]	you can open folders or files by adding the name of the location after it: "code my_awesome_project/test.txt".


mkdir		means make directory "mkdir [path]". "mkdir" won’t create a subdirectory of a non-existent directory: the intermediate level folders must be created first
mkdir -p	The "mkdir -p" command will allow us to create nested directories using the -p flag. e.g. "mkdir -p a/b/c" this comand
		will make 3 folders one inside another one. 
mkdir -v	Adding the "-v" flag will print the results of "mkdir" to the console. e.g. "mkdir -v a" will print "mkdir: created directory 'a'"
		but this CANT by done by for creating nested directories.



rmdir		remove directories in a working direction if they are empty i.e. "rmdir website".
rm -r		remove directories in a working direction even if they are NOT empty i.e. "rm -r website".
rm -rf		"remove force" remove directories in a working direction even if they are NOT empty i.e. "rm -rf website"

nano		rr-run text editor called "Nano". For exmpl. by runing "$ nano failas.txt" you open text editor whith not saved .txt file. 
		You must press ctrl+O to save this file in a curent direction. By default it will by named as you name it in the begining.
		by presing ctrl+X you will be back to the shell.
touch		create new file in a curent working direction. i.e. "touch my_file.txt"

rm		remove files in a working direction "rm [path]"  i.e. "rm failas.txt". "rm" by default only works on files, not directories. 
rm -r		"rm" can remove a directory and all its contents if we use the recursive option "-r", i.e. "rm -r thesis"
rm -i		"-i" option will prompt before (every) removal (use Y to confirm deletion or N to keep the file).
rm -v		uses the "-v" flag to list files that were deleted in ex. "rm -v a.txt" will list "removed a.txt"



mv		pronouncing like move, you can move file from one directory to another "mv [old] [new]" i.e. "mv thesis/quotes.txt ."
		or you can rename the file. i.e. "mv pirmas.txt antras.txt" this comand will rename from "pirmas" to "antras" 
mv -i		cause mv to request confirmation for renaming the filer
mv --interactive 

cp		pronouncing copy. You can copy files "cp [old] [new]" i.e. "cp a.txt b.txt"
		can copy multiple files at once, but the last argument must be the destination of directory i.e. "cp a.txt b.txt folder1"
		the original file names of the source files will be used as the names of the new files in the target directory
cp -f		-f flag to force the copying of the source file to the target file. It can be helfull if we in ex. don't have permision to write file.
cp -i		-i flag let you copy the source file and replace the target file. In ex. "cp -i a.txt b.txt" will owerwrite first file.
cp -R		we can use the -R flag to recursively copy the directory’s contents to the new directory. "cp -R folder1 folder2". 
		
		
backup/"
		Copy directory with all content in it using "-r" (recursive) option i.e. "cp -r thesis thesis_backup".

wc		is the ‘word count’ command: it counts the "number of lines", "words", and "characters in files" (returning the values in that order from left to right).
wc -l		If we run "wc -l" instead of just "wc", the output shows only the number of lines per file. i.e. "wc -l *.pdb"
wc -m		If we run "wc -m" instead of just "wc", the output shows only the number of characters per file. i.e. "wc -m *.pdb"
wc -w		If we run "wc -w" instead of just "wc", the output shows only the number of words per file. i.e. "wc -w *.pdb"


>		we can use ">" to write data to a file.
		Overwriting any existing content i.e. comand "wc -l *.pdb > lengths.txt" create new or owerwright the file "lengths.txt".
		Which may lead to data loss. Thus, redirect co	mmands require caution.

>>		like ">" ">>" also creating the file. But in this case appends (prideda) the string to the file if it already exists.
		insted of overwright the file like ">" comand do.
		
<		If we wanted to read data from a file, we can use "<". 	

head 		head displays the first 10 lines of its input.
head -n 	Using "-n 1" with "head" tells it that we only want the first line of the file;
		"-n 20" would get the first 20, and so on. Since "sorted-lengths.txt" contains the lengths of our files ordered from least to greatest, the output of head must be the file with the fewest lines.

tails		displays the last 10 lines of its input.
		this comand behave similar as "head" but prints lines from the end of a file instead.

cat		displays the contents of its inputs. cat - ‘concatenate’ i.e. join together, and it prints the contents of files one after another.
less		e. g. "less lengths.txt" This displays a screenful of the file, and then stops.
		You can go forward one screenful by pressing the spacebar, or back one by pressing b. Press q to quit.

sort		this command sort the contents of the file. e. g. "sort lenghts.txt"
-n		The "-n" option specifies a numerical rather than an alphanumerical sort. e. g. "sort -n lenghts.txt"
uniq		this command filters out adjacent matching lines in a file. e.g. "sort | uniq"
uniq -c		"-c" option gives a count of the number of times a line occurs in its input.



|		The vertical bar, between the two commands is called a pipe. E. g. "sort -n lengths.txt | head -n 1"
		It tells the shell that we want to use the output of the command on the left as the input to the command on the right.
		"[first] | [second]" is a pipeline: the output of the first command is used as the input to the second.

cut		this command is used to remove or ‘cut out’ certain sections of each line in the file,
		and cut expects the lines to be separated into columns by a Tab character. 
cut -d		"-d" character used in this way is a called a delimiter. E.g. "cut -d , "
		we can use "-d" option to specify the comma (kablelis) as our delimiter character. Delimeter can by only one, but any character from uor data. 
cut -d , -f 2	"-f" option specifyed that we want to extract the second field (column) and the delimeter(atskyriklis) is ","



FILLE PERMISION

groupe		Run the command groups to see what user-groups you belong to.

chmod		chmod ugo (u-user, g-groupe, o-other) file changes permissions of file to ugo - u is the user's permissions, g is the group's permissions, 
		and o is everyone else's permissions. The values of u, g, and o can be any number between 0 and 7.
		
chown		






OPTION

-		Most commands take options that begin with a single -

-l -h -t -r etc.	Is an aditional feature for main comand, not working as alone comand. MUST use with main comand i.e "ls -l", " ls -rtl". The adition comand 
			place NOT important, you can mixed them i.e. "ls -h -l" or "ls -lh" Works the same as "ls -l -h"

ls -F			print the list of data in working direction (ls -F without argument)
-l			Showing not only the file/directory names but also additional information
-l -h			This makes the file size ‘human readable’, i.e. displaying something like 5.3K instead of 5369.
-t			Lists items by time of last change instead of alphabetically.
-r			Lists the contents of a directory in reverse order.
-rt			Listed the most recently changed file.
-rt -l			Listed the most recently changed file and show the last changed dates.
-lr			Listed items by alphabetically in reverse order.
-s			Listed size of files and directories alongside the name
-S			Listed items by size
--version		output version information and exitq

-f                     do not sort, enable -aU, disable -ls --color
	-F, --classify         append indicator (one of */=>@|) to entries
	--file-type            likewise, except do not append '*'
	--format=WORD          across -x, commas -m, horizontal -x, long -l,
                               single-column -1, verbose -l, vertical -C
	--full-time            like -l --time-style=full-iso

WILD CARDS
*		is a wildcard, which represents zero or more other characters i.e "ls *.pdf" list all files ending .pdf
		* matches zero or more characters in a filename, so *.txt matches all files ending in .txt.

?		it represents exactly one character. i.e "ls ?.pdf" list files only with one character. 
		So you can change any or as much as you nead charakter with ?. i.e. you can use "?" "??" "???" etc.
		? matches any single character in a filename, so ?.txt matches a.txt but not any.txt.



NAVIGATING

. 		stands for the current directory.

- 		you can move it "back and forword" Moves you back to previous direction. It moves you only one step back to where you was before.

.. 		goes up one level. So you can back to home direction by executing cd .. comand for a few times.
../		goes up one level.

../..		goes up two level

file/file1	Directory names in a path are separated with slash

cd 		stands for the user’s home directory.
~ 		stands for the user’s home directory. 
--		stands for the user’s home directory.
		"~$" marked as user's home directory 

/		stands for the root directory. The root directory is where all your files like: bin lib32 lib64 etc. stored.



CHARACTER PRONOUNCING:

~ tilde
- dash
/ slash
\ back slash
! exclamation point
() brackets
{} curly bracket
| ???????


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<TIPS & TRICS>>>>>>>>>>>>>>>>>>>>>>

Open TERMINAL		You can also open the terminal by pressing Ctrl + Alt + T on your keyboard. Open the programs menu and search for “Terminal”. 

Copy/Paste		When you’re inside the command line, you’ll need to use Ctrl + Shift + C to copy and Ctrl + Shift + V to paste.

tab completion		using " Tab" key autofill text, just nead write 2-3 charecters in the begining and press "Tab"
			by pressing "Tab" twice brings up a list of all the files

unix man page		When using internet search, including this phrase in your search query will help to find relevant results.

DevOps			is collaboration betwen Development and operations.



EXPLANATION OF SYMBOL:

/ indicates that this is a directory
@ indicates a link
* indicates an executable
  indicates a file (any names that don’t have a classification symbol are files)
  
  
  
  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
  
  I'm using ubuntu and windows 11 on same computer. When I'm trying to mount Windows-SSD disk and open files in my windows computer I get "read-only" files. How I can fix it that I can save edited files?


AI
AI
This issue might be related to the way the partition is mounted in Ubuntu. By default, Windows partitions are mounted as read-only in Ubuntu to prevent accidental damage to the Windows file system.

To fix this issue and enable write access to the Windows partition, you can manually mount the Windows partition with write permissions. You can do this by modifying the /etc/fstab file in Ubuntu. However, it's important to note that modifying the fstab file can be risky if done incorrectly.

Here are some general steps to consider:

Identify the partition you want to mount. This can be done using the lsblk or blkid commands to get information about all available block devices.

Create a directory where you want the Windows partition to be mounted. For example, you can create a directory named windows_mount in the /mnt directory:

Shell Script

Copy

Insert
sudo mkdir /mnt/windows_mount
Obtain the UUID or the device path of the Windows partition. This can be obtained using the blkid command:

Shell Script

Copy

Insert
sudo blkid
Edit the /etc/fstab file to add an entry for the Windows partition, specifying the mount point, file system type, options, and permissions. For example:

Shell Script

Copy

Insert
UUID=<windows_partition_UUID> /mnt/windows_mount ntfs-3g defaults,windows_names,locale=en_US.utf8 0 0
Replace <windows_partition_UUID> with the actual UUID of the Windows partition.

Save the /etc/fstab file and exit the text editor.

Run the following command to mount the partition:

Shell Script

Copy

Insert
sudo mount -a
By adding an entry to the /etc/fstab file with appropriate options and permissions, you can mount the Windows partition with write access in Ubuntu. Keep in mind that modifying system files should be done with caution. If you're not comfortable with these steps, consider seeking assistance from a more experienced user or a professional.
  
  
  
  
  
  
